/// The set of language codes accepted by the CHM compiler.  
/// Each entry has a hex code, and a name ([ChmLanguage::name]).
///
/// For the full list, see <https://www.w3.org/International/ms-lang.html>
#[derive(Debug, Clone, Copy, Default)]
#[repr(u32)]
pub enum ChmLanguage {
    Af = 0x436,
    Sq = 0x41c,
    Ar = 0x1,
    ArSa = 0x401,
    ArIq = 0x801,
    ArEg = 0x0c01,
    ArLy = 0x1001,
    ArDz = 0x1401,
    ArMa = 0x1801,
    ArTn = 0x1c01,
    ArOm = 0x2001,
    ArYe = 0x2401,
    ArSy = 0x2801,
    ArJo = 0x2c01,
    ArLb = 0x3001,
    ArKw = 0x3401,
    ArAe = 0x3801,
    ArBh = 0x3c01,
    ArQa = 0x4001,
    Eu = 0x42d,
    Bg = 0x402,
    Be = 0x423,
    Ca = 0x403,
    Zh = 0x4,
    ZhTw = 0x404,
    ZhCn = 0x804,
    ZhHk = 0x0c04,
    ZhSg = 0x1004,
    Hr = 0x41a,
    Cs = 0x405,
    Da = 0x406,
    Nl = 0x413,
    NlBe = 0x813,
    En = 0x9,

    #[default]
    EnUs = 0x409,
    EnGb = 0x809,
    EnAu = 0x0c09,
    EnCa = 0x1009,
    EnNz = 0x1409,
    EnIe = 0x1809,
    EnZa = 0x1c09,
    EnJm = 0x2009,
    EnBz = 0x2809,
    EnTt = 0x2c09,
    Et = 0x425,
    Fo = 0x438,
    Fa = 0x429,
    Fi = 0x40b,
    Fr = 0x40c,
    FrBe = 0x80c,
    FrCa = 0x0c0c,
    FrCh = 0x100c,
    FrLu = 0x140c,
    Gd = 0x43c,
    De = 0x407,
    DeCh = 0x807,
    DeAt = 0x0c07,
    DeLu = 0x1007,
    DeLi = 0x1407,
    El = 0x408,
    He = 0x40d,
    Hi = 0x439,
    Hu = 0x40e,
    Is = 0x40f,
    In = 0x421,
    It = 0x410,
    ItCh = 0x810,
    Ja = 0x411,
    Ko = 0x412,
    Lv = 0x426,
    Lt = 0x427,
    Mk = 0x42f,
    Ms = 0x43e,
    Mt = 0x43a,
    No = 0x414,
    Pl = 0x415,
    PtBr = 0x416,
    Pt = 0x816,
    Rm = 0x417,
    Ro = 0x418,
    RoMo = 0x818,
    Ru = 0x419,
    RuMo = 0x819,
    Sr = 0x0c1a,
    Sk = 0x41b,
    Sl = 0x424,
    Sb = 0x42e,
    Es = 0x40a,
    EsMx = 0x80a,
    EsGt = 0x100a,
    EsCr = 0x140a,
    EsPa = 0x180a,
    EsDo = 0x1c0a,
    EsVe = 0x200a,
    EsCo = 0x240a,
    EsPe = 0x280a,
    EsAr = 0x2c0a,
    EsEc = 0x300a,
    EsCl = 0x340a,
    EsUy = 0x380a,
    EsPy = 0x3c0a,
    EsBo = 0x400a,
    EsSv = 0x440a,
    EsHn = 0x480a,
    EsNi = 0x4c0a,
    EsPr = 0x500a,
    Sx = 0x430,
    Sv = 0x41d,
    SvFi = 0x81d,
    Th = 0x41e,
    Ts = 0x431,
    Tn = 0x432,
    Tr = 0x41f,
    Uk = 0x422,
    Ur = 0x420,
    Vi = 0x42a,
    Xh = 0x434,
    Ji = 0x43d,
    Zu = 0x435,
}
impl ChmLanguage {
    pub fn name(&self) -> &'static str {
        match self {
            Self::Af => "Afrikaans",
            Self::Sq => "Albanian",
            Self::Ar => "Arabic (Standard)",
            Self::ArSa => "Arabic (Saudi Arabia)",
            Self::ArIq => "Arabic (Iraq)",
            Self::ArEg => "Arabic (Egypt)",
            Self::ArLy => "Arabic (Libya)",
            Self::ArDz => "Arabic (Algeria)",
            Self::ArMa => "Arabic (Morocco)",
            Self::ArTn => "Arabic (Tunisia)",
            Self::ArOm => "Arabic (Oman)",
            Self::ArYe => "Arabic (Yemen)",
            Self::ArSy => "Arabic (Syria)",
            Self::ArJo => "Arabic (Jordan)",
            Self::ArLb => "Arabic (Lebanon)",
            Self::ArKw => "Arabic (Kuwait)",
            Self::ArAe => "Arabic (U.A.E.)",
            Self::ArBh => "Arabic (Bahrain)",
            Self::ArQa => "Arabic (Qatar)",
            Self::Eu => "Basque",
            Self::Bg => "Bulgarian",
            Self::Be => "Belarusian",
            Self::Ca => "Catalan",
            Self::Zh => "Chinese",
            Self::ZhTw => "Chinese (Taiwan)",
            Self::ZhCn => "Chinese (PRC)",
            Self::ZhHk => "Chinese (Hong Kong)",
            Self::ZhSg => "Chinese (Singapore)",
            Self::Hr => "Croatian",
            Self::Cs => "Czech",
            Self::Da => "Danish",
            Self::Nl => "Dutch (Standard)",
            Self::NlBe => "Dutch (Belgian)",
            Self::En => "English",
            Self::EnUs => "English (United States)",
            Self::EnGb => "English (British)",
            Self::EnAu => "English (Australian)",
            Self::EnCa => "English (Canadian)",
            Self::EnNz => "English (New Zealand)",
            Self::EnIe => "English (Ireland)",
            Self::EnZa => "English (South Africa)",
            Self::EnJm => "English (Jamaica)",
            Self::EnBz => "English (Belize)",
            Self::EnTt => "English (Trinidad)",
            Self::Et => "Estonian",
            Self::Fo => "Faeroese",
            Self::Fa => "Farsi",
            Self::Fi => "Finnish",
            Self::Fr => "French (Standard)",
            Self::FrBe => "French (Belgian)",
            Self::FrCa => "French (Canadian)",
            Self::FrCh => "French (Swiss)",
            Self::FrLu => "French (Luxembourg)",
            Self::Gd => "Gaelic (Scots)",
            Self::De => "German (Standard)",
            Self::DeCh => "German (Swiss)",
            Self::DeAt => "German (Austrian)",
            Self::DeLu => "German (Luxembourg)",
            Self::DeLi => "German (Liechtenstein)",
            Self::El => "Greek",
            Self::He => "Hebrew",
            Self::Hi => "Hindi",
            Self::Hu => "Hungarian",
            Self::Is => "Icelandic",
            Self::In => "Indonesian",
            Self::It => "Italian (Standard)",
            Self::ItCh => "Italian (Swiss)",
            Self::Ja => "Japanese",
            Self::Ko => "Korean",
            Self::Lv => "Latvian",
            Self::Lt => "Lithuanian",
            Self::Mk => "Macedonian",
            Self::Ms => "Malaysian",
            Self::Mt => "Maltese",
            Self::No => "Norwegian (Bokmal)",
            Self::Pl => "Polish",
            Self::PtBr => "Portuguese (Brazilian)",
            Self::Pt => "Portuguese (Standard)",
            Self::Rm => "Rhaeto-Romanic",
            Self::Ro => "Romanian",
            Self::RoMo => "Romanian (Moldavia)",
            Self::Ru => "Russian",
            Self::RuMo => "Russian (Moldavia)",
            Self::Sr => "Serbian",
            Self::Sk => "Slovak",
            Self::Sl => "Slovenian",
            Self::Sb => "Sorbian",
            Self::Es => "Spanish (Spain - Modern Sort)",
            Self::EsMx => "Spanish (Mexican)",
            Self::EsGt => "Spanish (Guatemala)",
            Self::EsCr => "Spanish (Costa Rica)",
            Self::EsPa => "Spanish (Panama)",
            Self::EsDo => "Spanish (Dominican Republic)",
            Self::EsVe => "Spanish (Venezuela)",
            Self::EsCo => "Spanish (Colombia)",
            Self::EsPe => "Spanish (Peru)",
            Self::EsAr => "Spanish (Argentina)",
            Self::EsEc => "Spanish (Ecuador)",
            Self::EsCl => "Spanish (Chile)",
            Self::EsUy => "Spanish (Uruguay)",
            Self::EsPy => "Spanish (Paraguay)",
            Self::EsBo => "Spanish (Bolivia)",
            Self::EsSv => "Spanish (El Salvador)",
            Self::EsHn => "Spanish (Honduras)",
            Self::EsNi => "Spanish (Nicaragua)",
            Self::EsPr => "Spanish (Puerto Rico)",
            Self::Sx => "Sutu",
            Self::Sv => "Swedish",
            Self::SvFi => "Swedish (Finland)",
            Self::Th => "Thai",
            Self::Ts => "Tsonga",
            Self::Tn => "Tswana",
            Self::Tr => "Turkish",
            Self::Uk => "Ukrainian",
            Self::Ur => "Urdu",
            Self::Vi => "Vietnamese",
            Self::Xh => "Xhosa",
            Self::Ji => "Yiddish",
            Self::Zu => "Zulu",
        }
    }
    pub fn from_code(shortcode: &str) -> Option<Self> {
        match shortcode {
            "af" => Some(Self::Af),
            "sq" => Some(Self::Sq),
            "ar" => Some(Self::Ar),
            "ar-sa" => Some(Self::ArSa),
            "ar-iq" => Some(Self::ArIq),
            "ar-eg" => Some(Self::ArEg),
            "ar-ly" => Some(Self::ArLy),
            "ar-dz" => Some(Self::ArDz),
            "ar-ma" => Some(Self::ArMa),
            "ar-tn" => Some(Self::ArTn),
            "ar-om" => Some(Self::ArOm),
            "ar-ye" => Some(Self::ArYe),
            "ar-sy" => Some(Self::ArSy),
            "ar-jo" => Some(Self::ArJo),
            "ar-lb" => Some(Self::ArLb),
            "ar-kw" => Some(Self::ArKw),
            "ar-ae" => Some(Self::ArAe),
            "ar-bh" => Some(Self::ArBh),
            "ar-qa" => Some(Self::ArQa),
            "eu" => Some(Self::Eu),
            "bg" => Some(Self::Bg),
            "be" => Some(Self::Be),
            "ca" => Some(Self::Ca),
            "zh" => Some(Self::Zh),
            "zh-tw" => Some(Self::ZhTw),
            "zh-cn" => Some(Self::ZhCn),
            "zh-hk" => Some(Self::ZhHk),
            "zh-sg" => Some(Self::ZhSg),
            "hr" => Some(Self::Hr),
            "cs" => Some(Self::Cs),
            "da" => Some(Self::Da),
            "nl" => Some(Self::Nl),
            "nl-be" => Some(Self::NlBe),
            "en" => Some(Self::En),
            "en-us" => Some(Self::EnUs),
            "en-gb" => Some(Self::EnGb),
            "en-au" => Some(Self::EnAu),
            "en-ca" => Some(Self::EnCa),
            "en-nz" => Some(Self::EnNz),
            "en-ie" => Some(Self::EnIe),
            "en-za" => Some(Self::EnZa),
            "en-jm" => Some(Self::EnJm),
            "en-bz" => Some(Self::EnBz),
            "en-tt" => Some(Self::EnTt),
            "et" => Some(Self::Et),
            "fo" => Some(Self::Fo),
            "fa" => Some(Self::Fa),
            "fi" => Some(Self::Fi),
            "fr" => Some(Self::Fr),
            "fr-be" => Some(Self::FrBe),
            "fr-ca" => Some(Self::FrCa),
            "fr-ch" => Some(Self::FrCh),
            "fr-lu" => Some(Self::FrLu),
            "gd" => Some(Self::Gd),
            "de" => Some(Self::De),
            "de-ch" => Some(Self::DeCh),
            "de-at" => Some(Self::DeAt),
            "de-lu" => Some(Self::DeLu),
            "de-li" => Some(Self::DeLi),
            "el" => Some(Self::El),
            "he" => Some(Self::He),
            "hi" => Some(Self::Hi),
            "hu" => Some(Self::Hu),
            "is" => Some(Self::Is),
            "in" => Some(Self::In),
            "it" => Some(Self::It),
            "it-ch" => Some(Self::ItCh),
            "ja" => Some(Self::Ja),
            "ko" => Some(Self::Ko),
            "lv" => Some(Self::Lv),
            "lt" => Some(Self::Lt),
            "mk" => Some(Self::Mk),
            "ms" => Some(Self::Ms),
            "mt" => Some(Self::Mt),
            "no" => Some(Self::No),
            "pl" => Some(Self::Pl),
            "pt-br" => Some(Self::PtBr),
            "pt" => Some(Self::Pt),
            "rm" => Some(Self::Rm),
            "ro" => Some(Self::Ro),
            "ro-mo" => Some(Self::RoMo),
            "ru" => Some(Self::Ru),
            "ru-mo" => Some(Self::RuMo),
            "sr" => Some(Self::Sr),
            "sk" => Some(Self::Sk),
            "sl" => Some(Self::Sl),
            "sb" => Some(Self::Sb),
            "es" => Some(Self::Es),
            "es-mx" => Some(Self::EsMx),
            "es-gt" => Some(Self::EsGt),
            "es-cr" => Some(Self::EsCr),
            "es-pa" => Some(Self::EsPa),
            "es-do" => Some(Self::EsDo),
            "es-ve" => Some(Self::EsVe),
            "es-co" => Some(Self::EsCo),
            "es-pe" => Some(Self::EsPe),
            "es-ar" => Some(Self::EsAr),
            "es-ec" => Some(Self::EsEc),
            "es-cl" => Some(Self::EsCl),
            "es-uy" => Some(Self::EsUy),
            "es-py" => Some(Self::EsPy),
            "es-bo" => Some(Self::EsBo),
            "es-sv" => Some(Self::EsSv),
            "es-hn" => Some(Self::EsHn),
            "es-ni" => Some(Self::EsNi),
            "es-pr" => Some(Self::EsPr),
            "sx" => Some(Self::Sx),
            "sv" => Some(Self::Sv),
            "sv-fi" => Some(Self::SvFi),
            "th" => Some(Self::Th),
            "ts" => Some(Self::Ts),
            "tn" => Some(Self::Tn),
            "tr" => Some(Self::Tr),
            "uk" => Some(Self::Uk),
            "ur" => Some(Self::Ur),
            "vi" => Some(Self::Vi),
            "xh" => Some(Self::Xh),
            "ji" => Some(Self::Ji),
            "zu" => Some(Self::Zu),
            _ => None,
        }
    }
}
impl std::fmt::Display for ChmLanguage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let code = *self as u32;
        let name = self.name();
        write!(f, "{code:0x} {name}")
    }
}
